// SPDX-License-Identifier: zlib-acknowledgement
#include "desktop-assets.h"

#define ASSETS_NUM_SLOTS 256

// TODO: collate into fixed array with enum ids. 
// pack this array into executable binary: https://www.youtube.com/watch?v=dZRPY0D9nbU&list=PLpM-Dvs8t0Vak1rrE2NJn8XYEJ5M7-BqT&index=23&t=379s

INTERNAL Texture 
load_default_texture(void)
{
#define IMG_WIDTH 32
#define IMG_HEIGHT 32
#define IMG_SIZE (IMG_WIDTH * IMG_HEIGHT)
u32 data[IMG_SIZE] = {
    0xFF00FFFF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF,
    0xFF00FFFF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF,
    0xA800FFFF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xA80000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xA80000FF, 0xFF0000FF, 0xFF0000FF, 0xA80000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xA80000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0xA80000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xA80000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xA80000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0xD00000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xE80000FF,
    0xD000FFFF, 0xFF0000FF, 0xD00000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF,
    0xFF00FFFF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF,
    0xFF00FFFF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF,
    0xFF00FFFF, 0xFF0000FF, 0xD00000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF,
    0xFF00FFFF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xA80000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0xA80000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xA80000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xA80000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xA80000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xA80000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0xD00000FF, 0xFF0000FF, 0xFF0000FF, 0xA80000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0x000000FF,
    0xFF00FFFF, 0xFF0000FF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF, 0xFF0000FF,
    0xFF00FFFF, 0xFF0000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
    0x0000FFFF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF, 0xA80000FF, 0xFF0000FF, 0xFF0000
};

  Image img = {
      .data = RL_CALLOC(IMG_SIZE, sizeof(*data)),
      .width = IMG_WIDTH,
      .height = IMG_HEIGHT,
      .mipmaps = 1,
      .format = PIXELFORMAT_UNCOMPRESSED_R8G8B8A8
  };
  MEMORY_COPY(img.data, data, sizeof(*data) * IMG_SIZE);

  Texture t = LoadTextureFromImage(img);
  UnloadImage(img);
  return t;

#undef IMG_WIDTH
#undef IMG_HEIGHT
#undef IMG_SIZE
}


INTERNAL Font
assets_get_font(String8 key)
{
  u64 hash = str8_hash(key);
  u64 slot_i = hash % ASSETS_NUM_SLOTS;
  FontSlot *slot = g_state->assets.fonts.slots + slot_i;
  for (FontNode *n = slot->first; n != NULL; n = n->hash_chain_next)
  {
    if (str8_match(n->key, key, 0)) return n->value;
  }
  
  char cpath[256] = ZERO_STRUCT;
  str8_to_cstr(key, cpath, sizeof(cpath)); 

  // TODO(Ryan): Add parameters to asset keys
  // NOTE: will get default font if failed, so always valid
  Font v = LoadFontEx(cpath, 64, NULL, 0);

  FontNode *n = MEM_ARENA_PUSH_STRUCT(g_state->assets.arena, FontNode);
  n->key = key;
  n->value = v;

  __SLL_QUEUE_PUSH(slot->first, slot->last, n, hash_chain_next);
  __SLL_STACK_PUSH(g_state->assets.fonts.collection, n, hash_collection_next);

  return v;
}

INTERNAL Texture
assets_get_texture(String8 key)
{
  u64 hash = str8_hash(key);
  u64 slot_i = hash % ASSETS_NUM_SLOTS;
  TextureSlot *slot = g_state->assets.textures.slots + slot_i;
  for (TextureNode *n = slot->first; n != NULL; n = n->hash_chain_next)
  {
    if (str8_match(n->key, key, 0)) return n->value;
  }

  char cpath[256] = ZERO_STRUCT;
  str8_to_cstr(key, cpath, sizeof(cpath)); 

  Texture v = LoadTexture(cpath);
  if (v.id == 0) 
  {
    v = g_state->assets.default_texture;
  }

  //SetTextureFilter(v, TEXTURE_FILTER_BILINEAR);

  TextureNode *n = MEM_ARENA_PUSH_STRUCT(g_state->assets.arena, TextureNode);
  n->key = key;
  n->value = v;

  __SLL_QUEUE_PUSH(slot->first, slot->last, n, hash_chain_next);
  __SLL_STACK_PUSH(g_state->assets.textures.collection, n, hash_collection_next);

  return v;
}

INTERNAL void
assets_preload(State *state)
{
  for (FontNode *n = state->assets.fonts.collection; n != NULL; n = n->hash_collection_next)
  {
    UnloadFont(n->value);
  }
  for (TextureNode *n = state->assets.textures.collection; n != NULL; n = n->hash_collection_next)
  {
    UnloadTexture(n->value);
  }

  UnloadTexture(state->assets.default_texture);
  state->assets.default_texture = load_default_texture();

  state->assets.fonts = ZERO_STRUCT;
  state->assets.textures = ZERO_STRUCT;

  mem_arena_clear(state->assets.arena);

  state->assets.fonts.slots = MEM_ARENA_PUSH_ARRAY_ZERO(state->assets.arena, FontSlot, ASSETS_NUM_SLOTS);
  state->assets.textures.slots = MEM_ARENA_PUSH_ARRAY_ZERO(state->assets.arena, TextureSlot, ASSETS_NUM_SLOTS);
}
